#include<stdio.h>
//该实现项目仿照qsort函数，可以进行多种类型数组的冒泡排序
//void qsort(void *base,size_t num,size_t width,int(*cmp)(const void *e1,const void *e2));//库函数 快速排序

int cmp_int(void* e1,void* e2)//整形交换规则
{
    return *(int*)e1 - *(int*)e2;
}

void Swap(char* b1,char* b2,int width)//按字节将每个字节进行换位
{
    int i;
    for(i = 0;i < width;i++)//width为类型字节宽度，将每个字节都进行交换
    {
        char tmp = *b1;
        *b1 = *b2;
        *b2 = tmp;
        b1++;//依次后移
        b2++;
    }
}

void bubble_sort(void* base,int sz,int width,int (*cmp)(void* e1,void* e2))//实现多种冒泡排序
{
    int i,j;
    for(i = 0;i < sz;i++)
    {
        for(j = 0;j < sz-1-i;j++)
        {
            if( cmp((char*)base+j*width,(char*)base+(j+1)*width) > 0 )//将传入的两个参数设为char型指针
            //因为char型指针只有一个字节位置，利用width可以使用遍历或移动width位置，即移动了一个类型的字节
            //类似int型 width == 4，则每次移动都是4个字节，跳过一个数据类型
                Swap((char*)base+j*width,(char*)base+(j+1)*width,width);
        }
    }
}

int main()
{
    int arr[] = {9,8,7,6,5,4,3,2,1,0};
    int sz = sizeof(arr) / sizeof(arr[0]);//计算出数组大小
    bubble_sort( arr , sz , sizeof(arr[0]) , cmp_int);

    int i;
    for(i = 0;i < sz;i++)
    {
        printf("%d ",arr[i]);
    }
    
    return 0;
}
