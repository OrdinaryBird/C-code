#include "game.h"

void InitBoard(char board[ROW][COL],int row,int col)
{
    int i,j;
    for(i = 0;i < row;i++)
    {
        for(j = 0;j < col;j++)
            board[i][j] = ' ';
    }
}

void DisplayBoard(char board[ROW][COL],int row,int col)
{
    int i,j;
    for(i = 0;i < row;i++)
    {
        for(j = 0;j < col;j++)
        {
            printf(" %c ",board[i][j]);
            if(j < col -1)
                printf("|");
        }
        printf("\n");

        for(j = 0;j < col;j++)
        {
            if(i < row -1)
            {
                printf("...");
                if(j < col -1)
                    printf("|");
            }
        }
        printf("\n");
    }
}

void PlayerMove(char board[ROW][COL],int row,int col)
{
    int x = 0,y = 0;
    printf("玩家:>\n");

    while (1)
    {
        printf("请输入要下的坐标:>");
        scanf("%d%d",&x,&y);
        if(x >= 1 && x <= row && y >= 1 && y <= col)//判断合法性
        {
            if(board[x - 1][y - 1] == ' ')
            {
                board[x - 1][y - 1] = '*';
                break;
            }
            else
                printf("该处已被下过！请更改所下位置\n");
        }
        else
            printf("坐标非法，请重新输入！\n");
    }
}

void ComputerMove(char board[ROW][COL],int row,int col)
{
    int x = 0,y = 0;
    printf("电脑:>\n");

    while(1)
    {
        x = rand() % row;
        y = rand() % col;
        if(board[x][y] == ' ')
        {
            board[x][y] = '#';
            break;
        }
    }

}

//返回1 数组棋盘满了
//返回0 数组棋盘没满

int Isfull(char board[ROW][COL],int row,int col)
{
    int i = 0,j = 0;
    for(i = 0;i < row;i++)
    {
        for(j = 0;j < col;j++)
        {
            if(board[i][j] == ' ')
                return 0;
        }
    }
    return 1;
}

char Iswin(char board[ROW][COL],int row,int col)
{
    int i = 0;
    //玩家、电脑赢的判断方法
    for(i = 0;i < row;i++)
    {
        if(board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][1] != ' ')//横三列
            return board[i][1];
    }
    for(i = 0;i < row;i++)
    {
        if(board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[1][i] != ' ')//竖三行
            return board[1][i];
    }
    //斜对角
    if(board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[1][1] != ' ')
        return board[1][1];
    if(board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[1][1] != ' ')
        return board[1][1];
    //平局
    if( 1 == Isfull(board,ROW,COL))
        return 'E';
    return 'C';

    //继续
}
