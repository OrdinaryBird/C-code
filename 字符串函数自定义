#include<stdio.h>
#include<string.h>
#include<assert.h>

//1. 计数器的方法

int my_strlen(char* str)//计算字符串长度
{
    int count = 0;
    assert(str != NULL);
    while(*str != '\0')
    {
        count++;
        str++;
    }

    return count;
}

char* my_strcpy(char* dest,const char* src)//复制字符串函数
{
    assert(dest != NULL);
    assert(src != NULL);
    char* ret = dest;//因要返回一个char*类型的数值，所以赋予一个变量拷贝dest的地址

    //while(*src != '\0')
    //{
    //    *dest = *src;
    //    dest++;
    //    src++;
    //}
    //*dest = *src;

    //优化

    while(*dest++ = *src++);//使得上面的函数简化

    return ret;
}

char* my_strcat(char* dest,const char* src)//追加字符串函数
{
    assert(dest && src);
    char* ret = dest;
    //遍历dest找到'\0'，因为是追加在dest之后
    while(*dest != '\0')
    {
        dest++;
    }
    //追加
    while(*dest++ = *src++);

    return ret;
}

int my_strcmp(const char* str1,const char* str2)//比较字符串大小函数
{
    assert(str1 && str2);

    while(*str1 == *str2)
    {
        if(*str1 == '\0')//判断字符串是否相等，只有当*str1 == *str2
            return 0;
        str1++;
        str2++;
    }

    return (*str1 - *str2);//不相等返回之差
}

char* my_strstr(const char* p1,const char* p2)//寻找str2是否由str1旋转得来，或str2是否为str1得子串
{
    assert(p1 && p2);
    char* c1 = NULL;
    char* c2 = NULL;
    char* cur = (char*)p1;
    if(*p2 == '\0')
        return (char*)p1;
    while(*cur)
    {
        c1 = cur;
        c2 = (char*)p2;
        while(*c2 && *c1 && (*c1 == *c2))
        {
            c1++;
            c2++;
        }
        if(*c2 == '\0')
            return cur;
        cur++;
    }
    return NULL;
}

void* my_memcpy(void* dest,const void* src,size_t count)//多种类型字符串复制函数
{
    assert(dest && src);
    void* ret = dest;

    while(count--)
    {
        *(char*)dest = *(char*)src;
        (char*)dest++;
        (char*)src++;
    }
    return ret;
}

void* my_memmove(char* dest,const void* src,size_t count)//同一字符串函数拷贝
{
    void* ret = dest;
    if(dest < src || dest == src)//从前向后，目标地址在源地址的前方
    {
        while(count--)
        {
            *(char*)dest = *(char*)src;
            (char*)dest++;
            (char*)src++;
        }
    }
    else//从后往前
    {
        while(count--)
        {
            *((char*)dest+count) = *((char*)src+count);
        }
    }
    return ret;
}

int main()
{
    int arr1[] = {1,2,3,4,5,10,5,3,1,8};
    int arr2[] = {1,2,3,4,5,6,7,8,9,10};

    int ret = memcmp(arr1,arr2,24);
    printf("%d\n",ret);

    return 0;
}
